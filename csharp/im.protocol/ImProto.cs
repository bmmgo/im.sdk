// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ImProto.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace IM.Protocol {

  /// <summary>Holder for reflection information generated from ImProto.proto</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class ImProtoReflection {

    #region Descriptor
    /// <summary>File descriptor for ImProto.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ImProtoReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1JbVByb3RvLnByb3RvEgtJTS5Qcm90b2NvbCJdCg1Tb2NrZXRQYWNrYWdl",
            "EgsKA1NlcRgBIAEoBRIuCghDYXRlZ29yeRgCIAEoDjIcLklNLlByb3RvY29s",
            "LlBhY2thZ2VDYXRlZ29yeRIPCgdDb250ZW50GAMgASgMIuIBCgxTb2NrZXRS",
            "ZXN1bHQSLgoIQ2F0ZWdvcnkYASABKA4yHC5JTS5Qcm90b2NvbC5QYWNrYWdl",
            "Q2F0ZWdvcnkSJQoEQ29kZRgCIAEoDjIXLklNLlByb3RvY29sLlJlc3VsdENv",
            "ZGUSDwoHTWVzc2FnZRgDIAEoCRI5CghVc2VyVGFncxgEIAMoCzInLklNLlBy",
            "b3RvY29sLlNvY2tldFJlc3VsdC5Vc2VyVGFnc0VudHJ5Gi8KDVVzZXJUYWdz",
            "RW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgMOgI4ASJdCgpMb2dp",
            "blRva2VuEg4KBlVzZXJJRBgBIAEoCRINCgVUb2tlbhgCIAEoCRIPCgdWZXJz",
            "aW9uGAMgASgFEg4KBkFwcGtleRgEIAEoCRIPCgdJc0FkbWluGAUgASgIIsEB",
            "Cg9TZW5kVXNlck1lc3NhZ2USEAoIUmVjZWl2ZXIYASABKAkSDAoEVHlwZRgC",
            "IAEoBRIPCgdDb250ZW50GAMgASgJEjwKCFVzZXJUYWdzGAQgAygLMiouSU0u",
            "UHJvdG9jb2wuU2VuZFVzZXJNZXNzYWdlLlVzZXJUYWdzRW50cnkSDgoGU2Vu",
            "ZGVyGAUgASgJGi8KDVVzZXJUYWdzRW50cnkSCwoDa2V5GAEgASgJEg0KBXZh",
            "bHVlGAIgASgMOgI4ASLGAQoTUmVjZWl2ZWRVc2VyTWVzc2FnZRINCgVNc2dJ",
            "RBgBIAEoCRIOCgZTZW5kZXIYAiABKAkSDAoEVHlwZRgDIAEoBRIPCgdDb250",
            "ZW50GAQgASgJEkAKCFVzZXJUYWdzGAUgAygLMi4uSU0uUHJvdG9jb2wuUmVj",
            "ZWl2ZWRVc2VyTWVzc2FnZS5Vc2VyVGFnc0VudHJ5Gi8KDVVzZXJUYWdzRW50",
            "cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgMOgI4ASLIAQoSU2VuZENo",
            "YW5uZWxNZXNzYWdlEhEKCUNoYW5uZWxJRBgBIAEoCRIMCgRUeXBlGAIgASgF",
            "Eg8KB0NvbnRlbnQYAyABKAkSPwoIVXNlclRhZ3MYBCADKAsyLS5JTS5Qcm90",
            "b2NvbC5TZW5kQ2hhbm5lbE1lc3NhZ2UuVXNlclRhZ3NFbnRyeRIOCgZTZW5k",
            "ZXIYBSABKAkaLwoNVXNlclRhZ3NFbnRyeRILCgNrZXkYASABKAkSDQoFdmFs",
            "dWUYAiABKAw6AjgBIt8BChZSZWNlaXZlZENoYW5uZWxNZXNzYWdlEg0KBU1z",
            "Z0lEGAEgASgJEg4KBlNlbmRlchgCIAEoCRIRCglDaGFubmVsSUQYAyABKAkS",
            "DAoEVHlwZRgEIAEoBRIPCgdDb250ZW50GAUgASgJEkMKCFVzZXJUYWdzGAYg",
            "AygLMjEuSU0uUHJvdG9jb2wuUmVjZWl2ZWRDaGFubmVsTWVzc2FnZS5Vc2Vy",
            "VGFnc0VudHJ5Gi8KDVVzZXJUYWdzRW50cnkSCwoDa2V5GAEgASgJEg0KBXZh",
            "bHVlGAIgASgMOgI4ASIcCgdDaGFubmVsEhEKCUNoYW5uZWxJRBgBIAEoCSIt",
            "CglVc2VyR3JvdXASDgoGVXNlcklEGAEgASgJEhAKCEdyb3VwSURzGAIgAygJ",
            "IsIBChBTZW5kR3JvdXBNZXNzYWdlEg8KB0dyb3VwSUQYASABKAkSDAoEVHlw",
            "ZRgCIAEoBRIPCgdDb250ZW50GAMgASgJEj0KCFVzZXJUYWdzGAQgAygLMisu",
            "SU0uUHJvdG9jb2wuU2VuZEdyb3VwTWVzc2FnZS5Vc2VyVGFnc0VudHJ5Eg4K",
            "BlNlbmRlchgFIAEoCRovCg1Vc2VyVGFnc0VudHJ5EgsKA2tleRgBIAEoCRIN",
            "CgV2YWx1ZRgCIAEoDDoCOAEi2QEKFFJlY2VpdmVkR3JvdXBNZXNzYWdlEg0K",
            "BU1zZ0lEGAEgASgJEg4KBlNlbmRlchgCIAEoCRIPCgdHcm91cElEGAMgASgJ",
            "EgwKBFR5cGUYBCABKAUSDwoHQ29udGVudBgFIAEoCRJBCghVc2VyVGFncxgG",
            "IAMoCzIvLklNLlByb3RvY29sLlJlY2VpdmVkR3JvdXBNZXNzYWdlLlVzZXJU",
            "YWdzRW50cnkaLwoNVXNlclRhZ3NFbnRyeRILCgNrZXkYASABKAkSDQoFdmFs",
            "dWUYAiABKAw6AjgBKoECCg9QYWNrYWdlQ2F0ZWdvcnkSCAoEUGluZxAAEgkK",
            "BUxvZ2luEAESCgoGTG9nb3V0EAISDgoKU2VuZFRvVXNlchADEhEKDVNlbmRU",
            "b0NoYW5uZWwQBBITCg9SZWNlaXZlZFVzZXJNc2cQBRIWChJSZWNlaXZlZENo",
            "YW5uZWxNc2cQBhIRCg1CaW5kVG9DaGFubmVsEAcSEwoPVW5iaW5kVG9DaGFu",
            "bmVsEAgSDwoLQmluZFRvR3JvdXAQCRIRCg1VbmJpbmRUb0dyb3VwEAoSDwoL",
            "U2VuZFRvR3JvdXAQCxIUChBSZWNlaXZlZEdyb3VwTXNnEAwSCgoGUmVzdWx0",
            "EGMqOAoKUmVzdWx0Q29kZRILCgdTdWNjZXNzEAASDQoJTmVlZExvZ2luEAES",
            "DgoKQXV0aEZhaWxlZBACYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::IM.Protocol.PackageCategory), typeof(global::IM.Protocol.ResultCode), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.Protocol.SocketPackage), global::IM.Protocol.SocketPackage.Parser, new[]{ "Seq", "Category", "Content" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.Protocol.SocketResult), global::IM.Protocol.SocketResult.Parser, new[]{ "Category", "Code", "Message", "UserTags" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.Protocol.LoginToken), global::IM.Protocol.LoginToken.Parser, new[]{ "UserID", "Token", "Version", "Appkey", "IsAdmin" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.Protocol.SendUserMessage), global::IM.Protocol.SendUserMessage.Parser, new[]{ "Receiver", "Type", "Content", "UserTags", "Sender" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.Protocol.ReceivedUserMessage), global::IM.Protocol.ReceivedUserMessage.Parser, new[]{ "MsgID", "Sender", "Type", "Content", "UserTags" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.Protocol.SendChannelMessage), global::IM.Protocol.SendChannelMessage.Parser, new[]{ "ChannelID", "Type", "Content", "UserTags", "Sender" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.Protocol.ReceivedChannelMessage), global::IM.Protocol.ReceivedChannelMessage.Parser, new[]{ "MsgID", "Sender", "ChannelID", "Type", "Content", "UserTags" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.Protocol.Channel), global::IM.Protocol.Channel.Parser, new[]{ "ChannelID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.Protocol.UserGroup), global::IM.Protocol.UserGroup.Parser, new[]{ "UserID", "GroupIDs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.Protocol.SendGroupMessage), global::IM.Protocol.SendGroupMessage.Parser, new[]{ "GroupID", "Type", "Content", "UserTags", "Sender" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.Protocol.ReceivedGroupMessage), global::IM.Protocol.ReceivedGroupMessage.Parser, new[]{ "MsgID", "Sender", "GroupID", "Type", "Content", "UserTags" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, })
          }));
    }
    #endregion

  }
  #region Enums
  public enum PackageCategory {
    [pbr::OriginalName("Ping")] Ping = 0,
    [pbr::OriginalName("Login")] Login = 1,
    [pbr::OriginalName("Logout")] Logout = 2,
    [pbr::OriginalName("SendToUser")] SendToUser = 3,
    [pbr::OriginalName("SendToChannel")] SendToChannel = 4,
    [pbr::OriginalName("ReceivedUserMsg")] ReceivedUserMsg = 5,
    [pbr::OriginalName("ReceivedChannelMsg")] ReceivedChannelMsg = 6,
    [pbr::OriginalName("BindToChannel")] BindToChannel = 7,
    [pbr::OriginalName("UnbindToChannel")] UnbindToChannel = 8,
    [pbr::OriginalName("BindToGroup")] BindToGroup = 9,
    [pbr::OriginalName("UnbindToGroup")] UnbindToGroup = 10,
    [pbr::OriginalName("SendToGroup")] SendToGroup = 11,
    [pbr::OriginalName("ReceivedGroupMsg")] ReceivedGroupMsg = 12,
    [pbr::OriginalName("Result")] Result = 99,
  }

  public enum ResultCode {
    [pbr::OriginalName("Success")] Success = 0,
    [pbr::OriginalName("NeedLogin")] NeedLogin = 1,
    [pbr::OriginalName("AuthFailed")] AuthFailed = 2,
  }

  #endregion

  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SocketPackage : pb::IMessage<SocketPackage> {
    private static readonly pb::MessageParser<SocketPackage> _parser = new pb::MessageParser<SocketPackage>(() => new SocketPackage());
    public static pb::MessageParser<SocketPackage> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.Protocol.ImProtoReflection.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public SocketPackage() {
      OnConstruction();
    }

    partial void OnConstruction();

    public SocketPackage(SocketPackage other) : this() {
      seq_ = other.seq_;
      category_ = other.category_;
      content_ = other.content_;
    }

    public SocketPackage Clone() {
      return new SocketPackage(this);
    }

    /// <summary>Field number for the "Seq" field.</summary>
    public const int SeqFieldNumber = 1;
    private int seq_;
    public int Seq {
      get { return seq_; }
      set {
        seq_ = value;
      }
    }

    /// <summary>Field number for the "Category" field.</summary>
    public const int CategoryFieldNumber = 2;
    private global::IM.Protocol.PackageCategory category_ = 0;
    public global::IM.Protocol.PackageCategory Category {
      get { return category_; }
      set {
        category_ = value;
      }
    }

    /// <summary>Field number for the "Content" field.</summary>
    public const int ContentFieldNumber = 3;
    private pb::ByteString content_ = pb::ByteString.Empty;
    public pb::ByteString Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as SocketPackage);
    }

    public bool Equals(SocketPackage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Seq != other.Seq) return false;
      if (Category != other.Category) return false;
      if (Content != other.Content) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Seq != 0) hash ^= Seq.GetHashCode();
      if (Category != 0) hash ^= Category.GetHashCode();
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Seq != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Seq);
      }
      if (Category != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Category);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Content);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Seq != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seq);
      }
      if (Category != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Category);
      }
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Content);
      }
      return size;
    }

    public void MergeFrom(SocketPackage other) {
      if (other == null) {
        return;
      }
      if (other.Seq != 0) {
        Seq = other.Seq;
      }
      if (other.Category != 0) {
        Category = other.Category;
      }
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Seq = input.ReadInt32();
            break;
          }
          case 16: {
            category_ = (global::IM.Protocol.PackageCategory) input.ReadEnum();
            break;
          }
          case 26: {
            Content = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SocketResult : pb::IMessage<SocketResult> {
    private static readonly pb::MessageParser<SocketResult> _parser = new pb::MessageParser<SocketResult>(() => new SocketResult());
    public static pb::MessageParser<SocketResult> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.Protocol.ImProtoReflection.Descriptor.MessageTypes[1]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public SocketResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    public SocketResult(SocketResult other) : this() {
      category_ = other.category_;
      code_ = other.code_;
      message_ = other.message_;
      userTags_ = other.userTags_.Clone();
    }

    public SocketResult Clone() {
      return new SocketResult(this);
    }

    /// <summary>Field number for the "Category" field.</summary>
    public const int CategoryFieldNumber = 1;
    private global::IM.Protocol.PackageCategory category_ = 0;
    public global::IM.Protocol.PackageCategory Category {
      get { return category_; }
      set {
        category_ = value;
      }
    }

    /// <summary>Field number for the "Code" field.</summary>
    public const int CodeFieldNumber = 2;
    private global::IM.Protocol.ResultCode code_ = 0;
    public global::IM.Protocol.ResultCode Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "Message" field.</summary>
    public const int MessageFieldNumber = 3;
    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "UserTags" field.</summary>
    public const int UserTagsFieldNumber = 4;
    private static readonly pbc::MapField<string, pb::ByteString>.Codec _map_userTags_codec
        = new pbc::MapField<string, pb::ByteString>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForBytes(18), 34);
    private readonly pbc::MapField<string, pb::ByteString> userTags_ = new pbc::MapField<string, pb::ByteString>();
    public pbc::MapField<string, pb::ByteString> UserTags {
      get { return userTags_; }
    }

    public override bool Equals(object other) {
      return Equals(other as SocketResult);
    }

    public bool Equals(SocketResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Category != other.Category) return false;
      if (Code != other.Code) return false;
      if (Message != other.Message) return false;
      if (!UserTags.Equals(other.UserTags)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Category != 0) hash ^= Category.GetHashCode();
      if (Code != 0) hash ^= Code.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      hash ^= UserTags.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Category != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Category);
      }
      if (Code != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Code);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Message);
      }
      userTags_.WriteTo(output, _map_userTags_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (Category != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Category);
      }
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Code);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      size += userTags_.CalculateSize(_map_userTags_codec);
      return size;
    }

    public void MergeFrom(SocketResult other) {
      if (other == null) {
        return;
      }
      if (other.Category != 0) {
        Category = other.Category;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      userTags_.Add(other.userTags_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            category_ = (global::IM.Protocol.PackageCategory) input.ReadEnum();
            break;
          }
          case 16: {
            code_ = (global::IM.Protocol.ResultCode) input.ReadEnum();
            break;
          }
          case 26: {
            Message = input.ReadString();
            break;
          }
          case 34: {
            userTags_.AddEntriesFrom(input, _map_userTags_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class LoginToken : pb::IMessage<LoginToken> {
    private static readonly pb::MessageParser<LoginToken> _parser = new pb::MessageParser<LoginToken>(() => new LoginToken());
    public static pb::MessageParser<LoginToken> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.Protocol.ImProtoReflection.Descriptor.MessageTypes[2]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public LoginToken() {
      OnConstruction();
    }

    partial void OnConstruction();

    public LoginToken(LoginToken other) : this() {
      userID_ = other.userID_;
      token_ = other.token_;
      version_ = other.version_;
      appkey_ = other.appkey_;
      isAdmin_ = other.isAdmin_;
    }

    public LoginToken Clone() {
      return new LoginToken(this);
    }

    /// <summary>Field number for the "UserID" field.</summary>
    public const int UserIDFieldNumber = 1;
    private string userID_ = "";
    public string UserID {
      get { return userID_; }
      set {
        userID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Token" field.</summary>
    public const int TokenFieldNumber = 2;
    private string token_ = "";
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Version" field.</summary>
    public const int VersionFieldNumber = 3;
    private int version_;
    public int Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "Appkey" field.</summary>
    public const int AppkeyFieldNumber = 4;
    private string appkey_ = "";
    public string Appkey {
      get { return appkey_; }
      set {
        appkey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IsAdmin" field.</summary>
    public const int IsAdminFieldNumber = 5;
    private bool isAdmin_;
    public bool IsAdmin {
      get { return isAdmin_; }
      set {
        isAdmin_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as LoginToken);
    }

    public bool Equals(LoginToken other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserID != other.UserID) return false;
      if (Token != other.Token) return false;
      if (Version != other.Version) return false;
      if (Appkey != other.Appkey) return false;
      if (IsAdmin != other.IsAdmin) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (UserID.Length != 0) hash ^= UserID.GetHashCode();
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (Version != 0) hash ^= Version.GetHashCode();
      if (Appkey.Length != 0) hash ^= Appkey.GetHashCode();
      if (IsAdmin != false) hash ^= IsAdmin.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (UserID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserID);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Token);
      }
      if (Version != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Version);
      }
      if (Appkey.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Appkey);
      }
      if (IsAdmin != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsAdmin);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (UserID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserID);
      }
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (Version != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Version);
      }
      if (Appkey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Appkey);
      }
      if (IsAdmin != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(LoginToken other) {
      if (other == null) {
        return;
      }
      if (other.UserID.Length != 0) {
        UserID = other.UserID;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      if (other.Version != 0) {
        Version = other.Version;
      }
      if (other.Appkey.Length != 0) {
        Appkey = other.Appkey;
      }
      if (other.IsAdmin != false) {
        IsAdmin = other.IsAdmin;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            UserID = input.ReadString();
            break;
          }
          case 18: {
            Token = input.ReadString();
            break;
          }
          case 24: {
            Version = input.ReadInt32();
            break;
          }
          case 34: {
            Appkey = input.ReadString();
            break;
          }
          case 40: {
            IsAdmin = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SendUserMessage : pb::IMessage<SendUserMessage> {
    private static readonly pb::MessageParser<SendUserMessage> _parser = new pb::MessageParser<SendUserMessage>(() => new SendUserMessage());
    public static pb::MessageParser<SendUserMessage> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.Protocol.ImProtoReflection.Descriptor.MessageTypes[3]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public SendUserMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    public SendUserMessage(SendUserMessage other) : this() {
      receiver_ = other.receiver_;
      type_ = other.type_;
      content_ = other.content_;
      userTags_ = other.userTags_.Clone();
      sender_ = other.sender_;
    }

    public SendUserMessage Clone() {
      return new SendUserMessage(this);
    }

    /// <summary>Field number for the "Receiver" field.</summary>
    public const int ReceiverFieldNumber = 1;
    private string receiver_ = "";
    public string Receiver {
      get { return receiver_; }
      set {
        receiver_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Type" field.</summary>
    public const int TypeFieldNumber = 2;
    private int type_;
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "Content" field.</summary>
    public const int ContentFieldNumber = 3;
    private string content_ = "";
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "UserTags" field.</summary>
    public const int UserTagsFieldNumber = 4;
    private static readonly pbc::MapField<string, pb::ByteString>.Codec _map_userTags_codec
        = new pbc::MapField<string, pb::ByteString>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForBytes(18), 34);
    private readonly pbc::MapField<string, pb::ByteString> userTags_ = new pbc::MapField<string, pb::ByteString>();
    public pbc::MapField<string, pb::ByteString> UserTags {
      get { return userTags_; }
    }

    /// <summary>Field number for the "Sender" field.</summary>
    public const int SenderFieldNumber = 5;
    private string sender_ = "";
    /// <summary>
    ///   used for admin
    /// </summary>
    public string Sender {
      get { return sender_; }
      set {
        sender_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as SendUserMessage);
    }

    public bool Equals(SendUserMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Receiver != other.Receiver) return false;
      if (Type != other.Type) return false;
      if (Content != other.Content) return false;
      if (!UserTags.Equals(other.UserTags)) return false;
      if (Sender != other.Sender) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Receiver.Length != 0) hash ^= Receiver.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      hash ^= UserTags.GetHashCode();
      if (Sender.Length != 0) hash ^= Sender.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Receiver.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Receiver);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Type);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Content);
      }
      userTags_.WriteTo(output, _map_userTags_codec);
      if (Sender.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Sender);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Receiver.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Receiver);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      size += userTags_.CalculateSize(_map_userTags_codec);
      if (Sender.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Sender);
      }
      return size;
    }

    public void MergeFrom(SendUserMessage other) {
      if (other == null) {
        return;
      }
      if (other.Receiver.Length != 0) {
        Receiver = other.Receiver;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
      userTags_.Add(other.userTags_);
      if (other.Sender.Length != 0) {
        Sender = other.Sender;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Receiver = input.ReadString();
            break;
          }
          case 16: {
            Type = input.ReadInt32();
            break;
          }
          case 26: {
            Content = input.ReadString();
            break;
          }
          case 34: {
            userTags_.AddEntriesFrom(input, _map_userTags_codec);
            break;
          }
          case 42: {
            Sender = input.ReadString();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ReceivedUserMessage : pb::IMessage<ReceivedUserMessage> {
    private static readonly pb::MessageParser<ReceivedUserMessage> _parser = new pb::MessageParser<ReceivedUserMessage>(() => new ReceivedUserMessage());
    public static pb::MessageParser<ReceivedUserMessage> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.Protocol.ImProtoReflection.Descriptor.MessageTypes[4]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public ReceivedUserMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    public ReceivedUserMessage(ReceivedUserMessage other) : this() {
      msgID_ = other.msgID_;
      sender_ = other.sender_;
      type_ = other.type_;
      content_ = other.content_;
      userTags_ = other.userTags_.Clone();
    }

    public ReceivedUserMessage Clone() {
      return new ReceivedUserMessage(this);
    }

    /// <summary>Field number for the "MsgID" field.</summary>
    public const int MsgIDFieldNumber = 1;
    private string msgID_ = "";
    public string MsgID {
      get { return msgID_; }
      set {
        msgID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Sender" field.</summary>
    public const int SenderFieldNumber = 2;
    private string sender_ = "";
    public string Sender {
      get { return sender_; }
      set {
        sender_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Type" field.</summary>
    public const int TypeFieldNumber = 3;
    private int type_;
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "Content" field.</summary>
    public const int ContentFieldNumber = 4;
    private string content_ = "";
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "UserTags" field.</summary>
    public const int UserTagsFieldNumber = 5;
    private static readonly pbc::MapField<string, pb::ByteString>.Codec _map_userTags_codec
        = new pbc::MapField<string, pb::ByteString>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForBytes(18), 42);
    private readonly pbc::MapField<string, pb::ByteString> userTags_ = new pbc::MapField<string, pb::ByteString>();
    public pbc::MapField<string, pb::ByteString> UserTags {
      get { return userTags_; }
    }

    public override bool Equals(object other) {
      return Equals(other as ReceivedUserMessage);
    }

    public bool Equals(ReceivedUserMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MsgID != other.MsgID) return false;
      if (Sender != other.Sender) return false;
      if (Type != other.Type) return false;
      if (Content != other.Content) return false;
      if (!UserTags.Equals(other.UserTags)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (MsgID.Length != 0) hash ^= MsgID.GetHashCode();
      if (Sender.Length != 0) hash ^= Sender.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      hash ^= UserTags.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (MsgID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MsgID);
      }
      if (Sender.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Sender);
      }
      if (Type != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Type);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Content);
      }
      userTags_.WriteTo(output, _map_userTags_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (MsgID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MsgID);
      }
      if (Sender.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Sender);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      size += userTags_.CalculateSize(_map_userTags_codec);
      return size;
    }

    public void MergeFrom(ReceivedUserMessage other) {
      if (other == null) {
        return;
      }
      if (other.MsgID.Length != 0) {
        MsgID = other.MsgID;
      }
      if (other.Sender.Length != 0) {
        Sender = other.Sender;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
      userTags_.Add(other.userTags_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            MsgID = input.ReadString();
            break;
          }
          case 18: {
            Sender = input.ReadString();
            break;
          }
          case 24: {
            Type = input.ReadInt32();
            break;
          }
          case 34: {
            Content = input.ReadString();
            break;
          }
          case 42: {
            userTags_.AddEntriesFrom(input, _map_userTags_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SendChannelMessage : pb::IMessage<SendChannelMessage> {
    private static readonly pb::MessageParser<SendChannelMessage> _parser = new pb::MessageParser<SendChannelMessage>(() => new SendChannelMessage());
    public static pb::MessageParser<SendChannelMessage> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.Protocol.ImProtoReflection.Descriptor.MessageTypes[5]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public SendChannelMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    public SendChannelMessage(SendChannelMessage other) : this() {
      channelID_ = other.channelID_;
      type_ = other.type_;
      content_ = other.content_;
      userTags_ = other.userTags_.Clone();
      sender_ = other.sender_;
    }

    public SendChannelMessage Clone() {
      return new SendChannelMessage(this);
    }

    /// <summary>Field number for the "ChannelID" field.</summary>
    public const int ChannelIDFieldNumber = 1;
    private string channelID_ = "";
    public string ChannelID {
      get { return channelID_; }
      set {
        channelID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Type" field.</summary>
    public const int TypeFieldNumber = 2;
    private int type_;
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "Content" field.</summary>
    public const int ContentFieldNumber = 3;
    private string content_ = "";
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "UserTags" field.</summary>
    public const int UserTagsFieldNumber = 4;
    private static readonly pbc::MapField<string, pb::ByteString>.Codec _map_userTags_codec
        = new pbc::MapField<string, pb::ByteString>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForBytes(18), 34);
    private readonly pbc::MapField<string, pb::ByteString> userTags_ = new pbc::MapField<string, pb::ByteString>();
    public pbc::MapField<string, pb::ByteString> UserTags {
      get { return userTags_; }
    }

    /// <summary>Field number for the "Sender" field.</summary>
    public const int SenderFieldNumber = 5;
    private string sender_ = "";
    /// <summary>
    ///   used for admin
    /// </summary>
    public string Sender {
      get { return sender_; }
      set {
        sender_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as SendChannelMessage);
    }

    public bool Equals(SendChannelMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChannelID != other.ChannelID) return false;
      if (Type != other.Type) return false;
      if (Content != other.Content) return false;
      if (!UserTags.Equals(other.UserTags)) return false;
      if (Sender != other.Sender) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (ChannelID.Length != 0) hash ^= ChannelID.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      hash ^= UserTags.GetHashCode();
      if (Sender.Length != 0) hash ^= Sender.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ChannelID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ChannelID);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Type);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Content);
      }
      userTags_.WriteTo(output, _map_userTags_codec);
      if (Sender.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Sender);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ChannelID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChannelID);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      size += userTags_.CalculateSize(_map_userTags_codec);
      if (Sender.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Sender);
      }
      return size;
    }

    public void MergeFrom(SendChannelMessage other) {
      if (other == null) {
        return;
      }
      if (other.ChannelID.Length != 0) {
        ChannelID = other.ChannelID;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
      userTags_.Add(other.userTags_);
      if (other.Sender.Length != 0) {
        Sender = other.Sender;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ChannelID = input.ReadString();
            break;
          }
          case 16: {
            Type = input.ReadInt32();
            break;
          }
          case 26: {
            Content = input.ReadString();
            break;
          }
          case 34: {
            userTags_.AddEntriesFrom(input, _map_userTags_codec);
            break;
          }
          case 42: {
            Sender = input.ReadString();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ReceivedChannelMessage : pb::IMessage<ReceivedChannelMessage> {
    private static readonly pb::MessageParser<ReceivedChannelMessage> _parser = new pb::MessageParser<ReceivedChannelMessage>(() => new ReceivedChannelMessage());
    public static pb::MessageParser<ReceivedChannelMessage> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.Protocol.ImProtoReflection.Descriptor.MessageTypes[6]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public ReceivedChannelMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    public ReceivedChannelMessage(ReceivedChannelMessage other) : this() {
      msgID_ = other.msgID_;
      sender_ = other.sender_;
      channelID_ = other.channelID_;
      type_ = other.type_;
      content_ = other.content_;
      userTags_ = other.userTags_.Clone();
    }

    public ReceivedChannelMessage Clone() {
      return new ReceivedChannelMessage(this);
    }

    /// <summary>Field number for the "MsgID" field.</summary>
    public const int MsgIDFieldNumber = 1;
    private string msgID_ = "";
    public string MsgID {
      get { return msgID_; }
      set {
        msgID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Sender" field.</summary>
    public const int SenderFieldNumber = 2;
    private string sender_ = "";
    public string Sender {
      get { return sender_; }
      set {
        sender_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ChannelID" field.</summary>
    public const int ChannelIDFieldNumber = 3;
    private string channelID_ = "";
    public string ChannelID {
      get { return channelID_; }
      set {
        channelID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Type" field.</summary>
    public const int TypeFieldNumber = 4;
    private int type_;
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "Content" field.</summary>
    public const int ContentFieldNumber = 5;
    private string content_ = "";
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "UserTags" field.</summary>
    public const int UserTagsFieldNumber = 6;
    private static readonly pbc::MapField<string, pb::ByteString>.Codec _map_userTags_codec
        = new pbc::MapField<string, pb::ByteString>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForBytes(18), 50);
    private readonly pbc::MapField<string, pb::ByteString> userTags_ = new pbc::MapField<string, pb::ByteString>();
    public pbc::MapField<string, pb::ByteString> UserTags {
      get { return userTags_; }
    }

    public override bool Equals(object other) {
      return Equals(other as ReceivedChannelMessage);
    }

    public bool Equals(ReceivedChannelMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MsgID != other.MsgID) return false;
      if (Sender != other.Sender) return false;
      if (ChannelID != other.ChannelID) return false;
      if (Type != other.Type) return false;
      if (Content != other.Content) return false;
      if (!UserTags.Equals(other.UserTags)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (MsgID.Length != 0) hash ^= MsgID.GetHashCode();
      if (Sender.Length != 0) hash ^= Sender.GetHashCode();
      if (ChannelID.Length != 0) hash ^= ChannelID.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      hash ^= UserTags.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (MsgID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MsgID);
      }
      if (Sender.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Sender);
      }
      if (ChannelID.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ChannelID);
      }
      if (Type != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Type);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Content);
      }
      userTags_.WriteTo(output, _map_userTags_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (MsgID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MsgID);
      }
      if (Sender.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Sender);
      }
      if (ChannelID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChannelID);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      size += userTags_.CalculateSize(_map_userTags_codec);
      return size;
    }

    public void MergeFrom(ReceivedChannelMessage other) {
      if (other == null) {
        return;
      }
      if (other.MsgID.Length != 0) {
        MsgID = other.MsgID;
      }
      if (other.Sender.Length != 0) {
        Sender = other.Sender;
      }
      if (other.ChannelID.Length != 0) {
        ChannelID = other.ChannelID;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
      userTags_.Add(other.userTags_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            MsgID = input.ReadString();
            break;
          }
          case 18: {
            Sender = input.ReadString();
            break;
          }
          case 26: {
            ChannelID = input.ReadString();
            break;
          }
          case 32: {
            Type = input.ReadInt32();
            break;
          }
          case 42: {
            Content = input.ReadString();
            break;
          }
          case 50: {
            userTags_.AddEntriesFrom(input, _map_userTags_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Channel : pb::IMessage<Channel> {
    private static readonly pb::MessageParser<Channel> _parser = new pb::MessageParser<Channel>(() => new Channel());
    public static pb::MessageParser<Channel> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.Protocol.ImProtoReflection.Descriptor.MessageTypes[7]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Channel() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Channel(Channel other) : this() {
      channelID_ = other.channelID_;
    }

    public Channel Clone() {
      return new Channel(this);
    }

    /// <summary>Field number for the "ChannelID" field.</summary>
    public const int ChannelIDFieldNumber = 1;
    private string channelID_ = "";
    public string ChannelID {
      get { return channelID_; }
      set {
        channelID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Channel);
    }

    public bool Equals(Channel other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChannelID != other.ChannelID) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (ChannelID.Length != 0) hash ^= ChannelID.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ChannelID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ChannelID);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ChannelID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChannelID);
      }
      return size;
    }

    public void MergeFrom(Channel other) {
      if (other == null) {
        return;
      }
      if (other.ChannelID.Length != 0) {
        ChannelID = other.ChannelID;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ChannelID = input.ReadString();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class UserGroup : pb::IMessage<UserGroup> {
    private static readonly pb::MessageParser<UserGroup> _parser = new pb::MessageParser<UserGroup>(() => new UserGroup());
    public static pb::MessageParser<UserGroup> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.Protocol.ImProtoReflection.Descriptor.MessageTypes[8]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public UserGroup() {
      OnConstruction();
    }

    partial void OnConstruction();

    public UserGroup(UserGroup other) : this() {
      userID_ = other.userID_;
      groupIDs_ = other.groupIDs_.Clone();
    }

    public UserGroup Clone() {
      return new UserGroup(this);
    }

    /// <summary>Field number for the "UserID" field.</summary>
    public const int UserIDFieldNumber = 1;
    private string userID_ = "";
    public string UserID {
      get { return userID_; }
      set {
        userID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "GroupIDs" field.</summary>
    public const int GroupIDsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_groupIDs_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> groupIDs_ = new pbc::RepeatedField<string>();
    public pbc::RepeatedField<string> GroupIDs {
      get { return groupIDs_; }
    }

    public override bool Equals(object other) {
      return Equals(other as UserGroup);
    }

    public bool Equals(UserGroup other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserID != other.UserID) return false;
      if(!groupIDs_.Equals(other.groupIDs_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (UserID.Length != 0) hash ^= UserID.GetHashCode();
      hash ^= groupIDs_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (UserID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserID);
      }
      groupIDs_.WriteTo(output, _repeated_groupIDs_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (UserID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserID);
      }
      size += groupIDs_.CalculateSize(_repeated_groupIDs_codec);
      return size;
    }

    public void MergeFrom(UserGroup other) {
      if (other == null) {
        return;
      }
      if (other.UserID.Length != 0) {
        UserID = other.UserID;
      }
      groupIDs_.Add(other.groupIDs_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            UserID = input.ReadString();
            break;
          }
          case 18: {
            groupIDs_.AddEntriesFrom(input, _repeated_groupIDs_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SendGroupMessage : pb::IMessage<SendGroupMessage> {
    private static readonly pb::MessageParser<SendGroupMessage> _parser = new pb::MessageParser<SendGroupMessage>(() => new SendGroupMessage());
    public static pb::MessageParser<SendGroupMessage> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.Protocol.ImProtoReflection.Descriptor.MessageTypes[9]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public SendGroupMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    public SendGroupMessage(SendGroupMessage other) : this() {
      groupID_ = other.groupID_;
      type_ = other.type_;
      content_ = other.content_;
      userTags_ = other.userTags_.Clone();
      sender_ = other.sender_;
    }

    public SendGroupMessage Clone() {
      return new SendGroupMessage(this);
    }

    /// <summary>Field number for the "GroupID" field.</summary>
    public const int GroupIDFieldNumber = 1;
    private string groupID_ = "";
    public string GroupID {
      get { return groupID_; }
      set {
        groupID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Type" field.</summary>
    public const int TypeFieldNumber = 2;
    private int type_;
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "Content" field.</summary>
    public const int ContentFieldNumber = 3;
    private string content_ = "";
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "UserTags" field.</summary>
    public const int UserTagsFieldNumber = 4;
    private static readonly pbc::MapField<string, pb::ByteString>.Codec _map_userTags_codec
        = new pbc::MapField<string, pb::ByteString>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForBytes(18), 34);
    private readonly pbc::MapField<string, pb::ByteString> userTags_ = new pbc::MapField<string, pb::ByteString>();
    public pbc::MapField<string, pb::ByteString> UserTags {
      get { return userTags_; }
    }

    /// <summary>Field number for the "Sender" field.</summary>
    public const int SenderFieldNumber = 5;
    private string sender_ = "";
    /// <summary>
    ///   used for admin	
    /// </summary>
    public string Sender {
      get { return sender_; }
      set {
        sender_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as SendGroupMessage);
    }

    public bool Equals(SendGroupMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GroupID != other.GroupID) return false;
      if (Type != other.Type) return false;
      if (Content != other.Content) return false;
      if (!UserTags.Equals(other.UserTags)) return false;
      if (Sender != other.Sender) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (GroupID.Length != 0) hash ^= GroupID.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      hash ^= UserTags.GetHashCode();
      if (Sender.Length != 0) hash ^= Sender.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (GroupID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(GroupID);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Type);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Content);
      }
      userTags_.WriteTo(output, _map_userTags_codec);
      if (Sender.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Sender);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (GroupID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GroupID);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      size += userTags_.CalculateSize(_map_userTags_codec);
      if (Sender.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Sender);
      }
      return size;
    }

    public void MergeFrom(SendGroupMessage other) {
      if (other == null) {
        return;
      }
      if (other.GroupID.Length != 0) {
        GroupID = other.GroupID;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
      userTags_.Add(other.userTags_);
      if (other.Sender.Length != 0) {
        Sender = other.Sender;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            GroupID = input.ReadString();
            break;
          }
          case 16: {
            Type = input.ReadInt32();
            break;
          }
          case 26: {
            Content = input.ReadString();
            break;
          }
          case 34: {
            userTags_.AddEntriesFrom(input, _map_userTags_codec);
            break;
          }
          case 42: {
            Sender = input.ReadString();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ReceivedGroupMessage : pb::IMessage<ReceivedGroupMessage> {
    private static readonly pb::MessageParser<ReceivedGroupMessage> _parser = new pb::MessageParser<ReceivedGroupMessage>(() => new ReceivedGroupMessage());
    public static pb::MessageParser<ReceivedGroupMessage> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.Protocol.ImProtoReflection.Descriptor.MessageTypes[10]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public ReceivedGroupMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    public ReceivedGroupMessage(ReceivedGroupMessage other) : this() {
      msgID_ = other.msgID_;
      sender_ = other.sender_;
      groupID_ = other.groupID_;
      type_ = other.type_;
      content_ = other.content_;
      userTags_ = other.userTags_.Clone();
    }

    public ReceivedGroupMessage Clone() {
      return new ReceivedGroupMessage(this);
    }

    /// <summary>Field number for the "MsgID" field.</summary>
    public const int MsgIDFieldNumber = 1;
    private string msgID_ = "";
    public string MsgID {
      get { return msgID_; }
      set {
        msgID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Sender" field.</summary>
    public const int SenderFieldNumber = 2;
    private string sender_ = "";
    public string Sender {
      get { return sender_; }
      set {
        sender_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "GroupID" field.</summary>
    public const int GroupIDFieldNumber = 3;
    private string groupID_ = "";
    public string GroupID {
      get { return groupID_; }
      set {
        groupID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Type" field.</summary>
    public const int TypeFieldNumber = 4;
    private int type_;
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "Content" field.</summary>
    public const int ContentFieldNumber = 5;
    private string content_ = "";
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "UserTags" field.</summary>
    public const int UserTagsFieldNumber = 6;
    private static readonly pbc::MapField<string, pb::ByteString>.Codec _map_userTags_codec
        = new pbc::MapField<string, pb::ByteString>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForBytes(18), 50);
    private readonly pbc::MapField<string, pb::ByteString> userTags_ = new pbc::MapField<string, pb::ByteString>();
    public pbc::MapField<string, pb::ByteString> UserTags {
      get { return userTags_; }
    }

    public override bool Equals(object other) {
      return Equals(other as ReceivedGroupMessage);
    }

    public bool Equals(ReceivedGroupMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MsgID != other.MsgID) return false;
      if (Sender != other.Sender) return false;
      if (GroupID != other.GroupID) return false;
      if (Type != other.Type) return false;
      if (Content != other.Content) return false;
      if (!UserTags.Equals(other.UserTags)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (MsgID.Length != 0) hash ^= MsgID.GetHashCode();
      if (Sender.Length != 0) hash ^= Sender.GetHashCode();
      if (GroupID.Length != 0) hash ^= GroupID.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      hash ^= UserTags.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (MsgID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MsgID);
      }
      if (Sender.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Sender);
      }
      if (GroupID.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(GroupID);
      }
      if (Type != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Type);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Content);
      }
      userTags_.WriteTo(output, _map_userTags_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (MsgID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MsgID);
      }
      if (Sender.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Sender);
      }
      if (GroupID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GroupID);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      size += userTags_.CalculateSize(_map_userTags_codec);
      return size;
    }

    public void MergeFrom(ReceivedGroupMessage other) {
      if (other == null) {
        return;
      }
      if (other.MsgID.Length != 0) {
        MsgID = other.MsgID;
      }
      if (other.Sender.Length != 0) {
        Sender = other.Sender;
      }
      if (other.GroupID.Length != 0) {
        GroupID = other.GroupID;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
      userTags_.Add(other.userTags_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            MsgID = input.ReadString();
            break;
          }
          case 18: {
            Sender = input.ReadString();
            break;
          }
          case 26: {
            GroupID = input.ReadString();
            break;
          }
          case 32: {
            Type = input.ReadInt32();
            break;
          }
          case 42: {
            Content = input.ReadString();
            break;
          }
          case 50: {
            userTags_.AddEntriesFrom(input, _map_userTags_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
